import {useState} from "react";
import { SyncOutlined, InfoCircleOutlined, CheckCircleOutlined, WarningOutlined } from "@ant-design/icons";
import { Table, Tag, Modal, Button } from "antd";
import './ExploitTable.css'

export default function ExploitTable({tableData}) {
  const [page, setPage] = useState(1);
  const [sortedInfo, setSortedInfo] = useState({
    order: 'descend',
    columnKey: 'key',
  });

  const handleOnChange = (pagination) => {
    if(pagination.current == page){
    {
      if( sortedInfo.order == 'descend' ) {
      setSortedInfo({...sortedInfo, order: 'ascend'});
      } else {
      setSortedInfo({...sortedInfo, order: 'descend'});
      }
    }
  } else {
    setPage(pagination.current);
  }
}

  const modalError = (errormsg) => {
    Modal.error({
      title: "The exploit failed to launch",
      content: (
        <div className="console">
          <p> {errormsg}</p>
        </div>
      ),
      width: 1000,
    })
  } 


  const status = {
    1: {
      color: "#10953C",
      text: "Safe",
      icon: <CheckCircleOutlined />,
      error:false,
    },
    2: {
      color: "#EA9425",
      text: "In Progress",
      icon: <SyncOutlined spin />,
      error:false,
    },
    3: {
      color: "#db2d2f",
      text: "Vulnerable",
      icon: <WarningOutlined />,
      error:false,
    },
    4: {
      color: "#db2d2f",
      text: "Error",
      icon: <InfoCircleOutlined />,
      error: true,
    },
  };

  const columns = [
    {
      title: "Key",
      dataIndex: "key",
      key: "key",
      sorter:  (a, b) => a.key - b.key,
      sortOrder: sortedInfo.columnKey === 'key' ? sortedInfo.order : null,
      defaultSortOrder: 'descend',
    },
    {
      title: "Time",
      dataIndex: "time",
      key: "time",
    },
    {
      title: "URL",
      dataIndex: "url",
      key: "url",
    },
    {
      title: "Attack",
      dataIndex: "attack",
      key: "attack",
    },
    {
      title: "Status",
      dataIndex: "status",
      key: "status",
      render: (text, record) => {
        if(!status[text].error) {
          return(
        <Tag
          className="tag"
          color={status[text].color}
          icon={status[text].icon}
          style={{ fontSize: "14px" }}
        >
          {status[text].text}
        </Tag>
        )} else {
          return(
            <Button onClick={() => modalError(record.errormsg)} style={{border: 0,padding: 0 }} type="text">
              <Tag
                className="tag"
                color={status[text].color}
                icon={status[text].icon}
                style={{minWidth: '100%', fontSize: "14px" }}
              >
                {status[text].text}
              </Tag>
            </Button>
          )
        }
      },
    },
  ];

  if (tableData) {
    const dataSourceT = tableData.map((item) => {
      return {
        key: item.id,
        time: new Date(item.createdAt).toLocaleString(),
        url: item.host,
        attack: item.attack,
        status: item.status,
        errormsg: item.errormsg,
      };
    });
    
    return (
      <div className="table">
        <Table dataSource={dataSourceT} columns={columns} onChange={handleOnChange}/>
      </div>
    );
  }

  if (!tableData) {
    return (
      <div className="table">
        <Table loading={true} />
      </div>
    );
  }
}
