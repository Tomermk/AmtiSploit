import {useState} from "react";
import { SyncOutlined, CloseCircleOutlined } from "@ant-design/icons";
import { Table, Tag, Popconfirm } from "antd";
import useSWR from "swr";
import useAxios from '../utils/useAxios';

export default function ExploitTable() {
  let axiosAuth = useAxios();
  const fetcher = url => axiosAuth.get(url).then(res => res.data)
  const { data, error } = useSWR("http://localhost:3000/launch/exploits",fetcher);

  const status = {
    1: {
      color: "#10953C",
      text: "Safe",
      icon: "",
      error:false,
    },
    2: {
      color: "#EA9425",
      text: "In Progress",
      icon: <SyncOutlined spin />,
      error:false,
    },
    3: {
      color: "#db2d2f",
      text: "Vulnerable",
      icon: "",
      error:false,
    },
    4: {
      color: "#db2d2f",
      text: "Error",
      icon: <CloseCircleOutlined />,
      error: true,
    },
  };

  const columns = [
    {
      title: "Key",
      dataIndex: "key",
      key: "key",
    },
    {
      title: "Time",
      dataIndex: "time",
      key: "time",
    },
    {
      title: "URL",
      dataIndex: "url",
      key: "url",
    },
    {
      title: "Attack",
      dataIndex: "attack",
      key: "attack",
    },
    {
      title: "Status",
      dataIndex: "status",
      key: "status",
      render: (text, record) => {
        if(!status[text].error) {
          return(
        <Tag
          className="tag"
          color={status[text].color}
          icon={status[text].icon}
        >
          {status[text].text}
        </Tag>
        )} else {
          return(
            <Popconfirm title={record.errormsg} showCancel={false}>
              <Tag
                className="tag"
                color={status[text].color}
                icon={status[text].icon}
                style={{cursor: 'pointer'}}
              >
                {status[text].text}
              </Tag>
            </Popconfirm>
          )
        }
      },
    },
  ];

  if (data) {
    const dataSourceT = data.map((item) => {
      return {
        key: item.id,
        time: item.createdAt,
        url: item.host,
        attack: item.attack,
        status: item.status,
        errormsg: item.errormsg,
      };
    });
    
    return (
      <div className="table">
        <Table dataSource={dataSourceT} columns={columns} />
      </div>
    );
  }

  if (!data) {
    return (
      <div className="table">
        <Table loading={true} />
      </div>
    );
  }
}
